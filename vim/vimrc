"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                Preamble                                 "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set nocompatible

" Needed for vundle, will be turned on after vundle inits
filetype off

" Setup vundle
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                          Vundle configuration                           "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" These need to come before the configuration options for the plugins since
" sundle will add the plugin folders to the runtimepath only after it has seen
" the plugin's Bundle command.

" Easily switch between header and source file
Bundle 'FSwitch'

" Automagically implement the prototypes in a header file
" Bundle 'FuzzyFinder'

" Bundle 'L9'

" User <leader><leader> to get enhances vim-motions
Bundle 'Lokaltog/vim-easymotion'

" Beautiful status line
Bundle 'bling/vim-airline'

" Bufferline to show current open buffers
Bundle 'bling/vim-bufferline'

" Improve the behaviour of parenthesis, quotations, etc.
Bundle 'Raimondi/delimitMate'

" Add the :Rename command to change the name of the buffer
Bundle 'Rename'

" Ultimate snippets!
Bundle 'SirVer/ultisnips'

" Easily show the quickfix and list windows
Bundle 'Valloric/ListToggle'

" Bundle 'Valloric/python-indent' ---- TODO

" Highlight math operators (+, -, *, ...)
Bundle 'Valloric/vim-operator-highlight'

" Intelli-awesome completer for python/c(++)
" Bundle 'Valloric/YouCompleteMe'

" Keep the contents of all changed, yanked and deleted characters
Bundle 'YankRing.vim'

" Add :BN BD BP .. etc to enhance the behaviour of buffer navigation and deletion
Bundle 'bufkill.vim'

" Jump between files inside a project magically
Bundle 'wincent/Command-T'

" This awesome plugin manager!
Bundle 'gmarik/vundle'

" Aling all sorts of stuff
Bundle 'godlygeek/tabular'

" Adds a window pane that shows the classes and methods on buffer (req: Exh-CTags)
Bundle 'majutsushi/tagbar'

" Adds a text object based on indentation level. ii gets current level, ai gets current level plus one line above
Bundle 'michaeljsmith/vim-indent-object'

" Wrapper for ack: search any text recursively inside a folder
Bundle 'mileszs/ack.vim'

" Better python and python3 syntax highlighting
Bundle 'python.vim'

" Parse the language and show if there are any syntax errors in the gutter
Bundle 'scrooloose/syntastic'

" Use a key to show the undo tree of VIM. Amazing.
Bundle 'sjl/gundo.vim'

" Comment using sane mappings ---- TODO check block comments
Bundle 'tomtom/tcomment_vim'

" Amazing plugin to use git inside vim, also add git commit types etc.
Bundle 'tpope/vim-fugitive'
Bundle 'tpope/vim-git'

" This might be useless??
Bundle 'tpope/vim-repeat'

" Mighty cholorscheme!
Bundle 'w0ng/vim-hybrid'

" Comment all this for now ... too much to handle as it is TODO
" Xolox's awesome VIML library
" Bundle 'xolox/vim-misc'

" Xolox's awesome note taking app
" Bundle 'xolox/vim-notes'

" Xolox's awesome python reference lookup
" Bundle 'xolox/vim-pyref'

" Xolox's awesome session manager
" Bundle 'xolox/vim-session'

" Use a smart start screen instead of default's useless one
" Bundle 'mhinz/vim-startify'
"
Bundle 'xterm-color-table.vim'

" Mail attachment for mutt
Bundle 'chrisbra/CheckAttach'

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                           reset vimrc augroup                           "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" We reset the vimrc augroup. Autocommands are added to this group throughout
" the file
augroup vimrc
  autocmd!
augroup END

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                        turn on filetype plugins                         "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" enable detection, plugins and indenting in one step
" this needs to come after the bundle commands!
filetype plugin indent on

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                            General settings                             "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" DISPLAY SETTINGS
let g:hybrid_use_Xresources = 1 " tell hybrid colorscheme to match terminal colors
colorscheme hybrid              " sets the colorscheme
set background=dark             " enable for dark terminals
set scrolloff=2                 " 2 lines above/below cursor when scrolling
set showmatch                   " show matching bracket (briefly jump)
set matchtime=2                 " reduces matching paren blink time from the 5[00]ms def
set showmode                    " show mode in status bar (insert/replace/...)
set showcmd                     " show typed command in status bar
set ruler                       " show cursor position in status bar
set title                       " show file in titlebar
set undofile                    " stores undo state even when files are closed (in undodir)
set undodir^=~/.vim/tmp/undo
set cursorline                  " highlights the current line
set winaltkeys=no               " turns of the Alt key bindings to the gui menu
set timeoutlen=1500             " Wait for 1.5 secs on key-mappings
set ttimeoutlen=50              " Wait for 50mS for key-codes
let g:is_bash = 1               " Force .sh to be treated as bash
" set foldmethod=syntax

" When you type the first tab, it will complete as much as possible, the second
" tab hit will provide a list, the third and subsequent tabs will cycle through
" completion options so you can complete the file without further keys
set wildmode=longest,list,full
set wildmenu            " completion with menu
" This changes the default display of tab and CR chars in list mode
" set listchars=tab:›\ ,eol:¬

" The "longest" option makes completion insert the longest prefix of all
" the possible matches; see :h completeopt
set completeopt=menu,menuone,longest
set switchbuf=useopen,usetab

" EDITOR SETTINGS
set ignorecase               " case insensitive searching
set smartcase                " but become case sensitive if you type uppercase characters
set autoindent               " on new lines, match indent of previous line
set copyindent               " copy the previous indentation on autoindenting
set cindent                  " smart indenting for c-like code
set cino=b1,g0,N-s,t0,(0,W4  " see :h cinoptions-values
" set the char of the vertical split:
set fillchars+=vert:\ "
set smarttab                 " smart tab handling for indenting
set magic                    " change the way backslashes are used in search patterns
set bs=indent,eol,start      " Allow backspacing over everything in insert mode
set nobackup                 " no backup~ files.
set noswapfile               " don't use old useless swaps
set nowb                     " No backup when overwriting

set number                   " Show line numbers
set relativenumber           " Show relaitve numbers

set tabstop=2                " number of spaces a tab counts for
set shiftwidth=2             " spaces for autoindents
set softtabstop=2
set shiftround               " makes indenting a multiple of shiftwidth
set expandtab                " turn a tab into spaces
set laststatus=2             " the statusline is now always shown
set noshowmode               " don't show the mode (" -- INSERT -- ") at the bottom

set fileformat=unix          " file mode is unix
set fileformats=unix,dos,mac " detects unix, dos, mac file formats in that order

set viminfo='20,\"700       " remember copy registers after quitting in the .viminfo
                             " file -- 20 jump links, regs up to 700 lines'

set hidden                   " allows making buffers hidden even with unsaved changes
set history=2000             " remember more commands and search history
set undolevels=3000          " use many levels of undo
set autoread                 " auto read when a file is changed from the outside
set mouse=a                  " enables the mouse in all modes

" toggles vim's paste mode; when we want to paste something into vim from a
" different application, turning on paste mode prevents the insertion of extra
" whitespace
set pastetoggle=<F2>

" Right-click on selection should bring up a menu
set mousemodel=popup_setpos

" With this, the gui (gvim) now doesn't have the toolbar, the left
" and right scrollbars and the menu.
set guioptions-=T
set guioptions-=l
set guioptions-=L
set guioptions-=r
set guioptions-=R
set guioptions-=m
set guioptions-=M

" this makes sure that shell scripts are highlighted
" as bash scripts and not sh scripts
let g:is_posix = 1

" tries to avoid those annoying "hit enter to continue" messages
" if it still doesn't help with certain commands, add a second <cr>
" at the end of the map command
set shortmess=a

" Look for tag def in a "tags" file in the dir of the current file, then for
" that same file in every folder above the folder of the current file, until the
" root.
" set tags=./tags;/

" turns off all error bells, visual or otherwise
set noerrorbells visualbell t_vb=
autocmd vimrc GUIEnter * set visualbell t_vb=

" Switch syntax highlighting on, when the terminal has colors
if &t_Co > 2 || has("gui_running")
  syntax on
endif

" none of these should be word dividers, so make them not be
set iskeyword+=_,$,@,%,#

" Number of screen lines to use for the command-line
set cmdheight=2

" allow backspace and cursor keys to cross line boundaries
set whichwrap+=<,>,h,l
set nohlsearch          " do not highlight searched-for phrases
set incsearch           " ...but do highlight-as-I-type the search string
set gdefault            " this makes search/replace global by default

" enforces a specified line-length and auto inserts hard line breaks when we
" reach the limit; in Normal mode, you can reformat the current paragraph with
" gqap.
set textwidth=100

" this makes the color after the textwidth column highlighted
set colorcolumn=+1

" options for formatting text; see :h formatoptions
" set formatoptions=tcroqnj

if v:version >= 704
  " The new Vim regex engine is currently slooooow as hell which makes syntax
  " highlighting slow, which introduces typing latency.
  " Consider removing this in the future when the new regex engine becomes
  " faster.
  set regexpengine=1
endif

if has('unnamedplus')
  " By default, Vim will not use the system clipboard when yanking/pasting to
  " the default register. This option makes Vim use the system default
  " clipboard.
  " Note that on X11, there are _two_ system clipboards: the "standard" one, and
  " the selection/mouse-middle-click one. Vim sees the standard one as register
  " '+' (and this option makes Vim use it by default) and the selection one as
  " '*'.
  " See :h 'clipboard' for details.
  set clipboard=unnamedplus,unnamed
else
  " Vim now also uses the selection system clipboard for default yank/paste.
  set clipboard+=unnamed
endif


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                           More involved tweaks                          "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Unicode support (taken from http://vim.wikia.com/wiki/Working_with_Unicode)
if has("multi_byte")
  if &termencoding == ""
    let &termencoding = &encoding
  endif
  set encoding=utf-8
  setglobal fileencoding=utf-8
  set fileencodings=ucs-bom,utf-8,latin1
endif

augroup vimrc
  " Automatically delete trailing DOS-returns and whitespace on file open and
  " write.
  autocmd BufRead,BufWritePre,FileWritePre * silent! %s/[\r \t]\+$//
augroup END

" Highlight Class and Function names, classes/namespaces for now
function! s:HighlightFunctionsAndClasses()
  " syn match cCustomFunc      "\w\+\s*\((\)\@="
  syn match cCustomClass     "\w\+\s*\(::\)\@="

  " hi def link cCustomFunc      Function
  hi def link cCustomClass     Function
endfunction

" TODO: this should:
" a) not be called for every filetype
" b) be in a separate plugin
au vimrc Syntax * call s:HighlightFunctionsAndClasses()

function! VisualSearch(direction) range
    let l:saved_reg = @"
    execute "normal! vgvy"

    let l:pattern = escape(@", '\\/.*$^~[]')
    let l:pattern = substitute(l:pattern, "\n$", "", "")

    if a:direction == 'b'
        execute "normal ?" . l:pattern . "^M"
    elseif a:direction == 'gv'
        execute "Ack " . l:pattern
    elseif a:direction == 'f'
        execute "normal /" . l:pattern . "^M"
    endif

    let @/ = l:pattern
    let @" = l:saved_reg
endfunction

"Basically you press * or # to search for the current selection
vnoremap <silent> * :call VisualSearch('f')<CR>
vnoremap <silent> # :call VisualSearch('b')<CR>
vnoremap <silent> ff :call VisualSearch('gv')<CR>

" cindent is a bit too smart for its own good and triggers in text files when
" you're typing inside parens and then hit enter; it aligns the text with the
" opening paren and we do NOT want this in text files!
autocmd vimrc FileType text,markdown,gitcommit set nocindent

" Change cursor to a bar when in insert mode for console VIM
" some terminals (e.g. Konsole) will report $TERM as xterm, so
" without a smarter script to determine the emulator (ie. termname)
" this might fail
if !has('gui_running')
  if !executable('termname')
    let s:termname = &term
  else
    let s:termname = system('termname')
  endif
  if s:termname =~ 'xterm'
    " solid bar
    let &t_SI .= "\<Esc>[6 q"
    " solid block
    let &t_EI .= "\<Esc>[2 q"
  elseif s:termname =~ 'gnome-terminal'
    au InsertEnter * silent execute "!gconftool-2 --type string --set /apps/gnome-terminal/profiles/Solarized/cursor_shape ibeam"
    au InsertLeave * silent execute "!gconftool-2 --type string --set /apps/gnome-terminal/profiles/Solarized/cursor_shape block"
    au VimLeave * silent execute "!gconftool-2 --type string --set /apps/gnome-terminal/profiles/Solarized/cursor_shape block"
  endif
endif

" Wrap text only at break locations for text and .tex files
au Filetype tex call SetupTextFile()
au Filetype text call SetupTextFile()
function! SetupTextFile()
  setlocal spell
  let &l:showbreak='¤ '
  setlocal wrap
  setlocal linebreak
  setlocal nonumber
endfunction!

" Return to last edit position when opening files (You want this!)
autocmd BufReadPost *
     \ if line("'\"") > 0 && line("'\"") <= line("$") |
     \   exe "normal! g`\"" |
     \ endif

" Special consideration for quickfix
autocmd BufReadPost quickfix call SetupHelpPane()
function! SetupHelpPane()
  setlocal norelativenumber
  setlocal colorcolumn=""
endfunction

" Don't close window, when deleting a buffer
command! Bclose call <SID>BufcloseCloseIt()
function! <SID>BufcloseCloseIt()
   let l:currentBufNum = bufnr("%")
   let l:alternateBufNum = bufnr("#")

   if buflisted(l:alternateBufNum)
     buffer #
   else
     bnext
   endif

   if bufnr("%") == l:currentBufNum
     new
   endif

   if buflisted(l:currentBufNum)
     execute("bdelete! ".l:currentBufNum)
   endif
endfunction
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                            custom mappings                              "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" our <leader> will be the ',' key
let mapleader=","

" our <localleader> will be the '\' key
let maplocalleader="\\"

" this makes vim's regex engine "not stupid"
" see :h magic
nnoremap / /\v
vnoremap / /\v

" Fast saving
nnoremap <leader>w :w<cr>

" <leader>v brings up .vimrc
" <leader>V reloads it and makes all changes active (file has to be saved first)
let $MYVIMRC=$HOME . '/.vim/vimrc'
noremap <leader>v :e! $MYVIMRC<CR>
noremap <silent> <leader>V :source $MYVIMRC<CR>:filetype detect<CR>:exe ":echo 'vimrc reloaded'"<CR>

" Type jj quickly to exit insert mode
inoremap jj <Esc>

" Control D deletes current buffer
nnoremap <C-D> :Bclose<CR>

" This command will allow us to save a file we don't have permission to save
" *after* we have already opened it. Super useful.
cnoremap w!! w !sudo tee % >/dev/null

" g<c-]> is jump to tag if there's only one matching tag, but show list of
" options when there is more than one definition
nnoremap <leader>g g<c-]>

" These create newlines like o and O but stay in normal mode
nnoremap <silent> zj o<Esc>k
nnoremap <silent> zk O<Esc>j

" Now we don't have to move our fingers so far when we want to scroll through
" the command history; also, don't forget the q: command (see :h q: for more
" info)
cnoremap <c-j> <down>
cnoremap <c-k> <up>

" Keep search matches in the middle of the window.
" zz centers the screen on the cursor, zv unfolds any fold if the cursor
" suddenly appears inside a fold.
nnoremap * *zzzv
nnoremap # #zzzv
nnoremap n nzzzv
nnoremap N Nzzzv

" Also center the screen when jumping through the changelist
nnoremap g; g;zz
nnoremap g, g,zz

" In normal mode, we use : much more often than ; so lets swap them.
" WARNING: this will cause any "ordinary" map command without the "nore" prefix
" that uses ":" to fail. For instance, "map <f2> :w" would fail, since vim will
" read ":w" as ";w" because of the below remappings. Use "noremap"s in such
" situations and you'll be fine.
nnoremap ; :
nnoremap : ;
vnoremap ; :
vnoremap : ;

" This makes j and k work on "screen lines" instead of on "file lines"; now, when
" we have a long line that wraps to multiple screen lines, j and k behave as we
" expect them to.
nnoremap j gj
nnoremap k gk

" Use Q for formatting the current paragraph (or visual selection)
vnoremap Q gq
nnoremap Q gqap

" This is quit all
noremap <Leader>q :qa<cr>

" key bindings for quickly moving between windows
" h left, l right, k up, j down
noremap <leader>h <c-w>h
noremap <leader>l <c-w>l
noremap <leader>k <c-w>k
noremap <leader>j <c-w>j

" Switch to the directory of the open buffer
noremap <leader>cd :cd %:p:h<cr>

" Toggle and untoggle spell checking
noremap <leader>ss :setlocal spell! spelllang=en_us<cr>

" spelling shortcuts using <leader>
" ]s next misspelled word
" [s previous misspelled word
" zg add to dict
" z= get suggestions
noremap <leader>sn ]s
noremap <leader>sp [s
noremap <leader>sa zg
noremap <leader>s<leader> z=

" Using '<' and '>' in visual mode to shift code by a tab-width left/right by
" default exits visual mode. With this mapping we remain in visual mode after
" such an operation.
vnoremap < <gv
vnoremap > >gv

" Mappings to move lines
nnoremap <C-j> :m .+1<CR>==
nnoremap <C-k> :m .-2<CR>==
vnoremap <C-j> :m '>+1<CR>gv=gv
vnoremap <C-k> :m '<-2<CR>gv=gv

" Go to next buffer easily
nnoremap <tab> :bn <CR>
nnoremap <S-tab> :bp <CR>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                               CheckAttach                               "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

let g:checkattach_filebrowser = 'ranger'

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                               Command-T                                 "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

let g:CommandTMaxHeight          = 30
let g:CommandTMatchWindowReverse = 1 " shows results in reverse order
let g:CommandTSelectNextMap  = [ '<down>' ]
let g:CommandTSelectPrevMap  = [ '<up>' ]

set wildignore+=*.o,*.obj,.git,*.pyc,*.so,*.a,blaze*,READONLY,llvm,Library*,CMakeFiles
nnoremap <leader>t :CommandT<cr>
nnoremap <leader>' :CommandTFlush<cr>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                 Gundo                                   "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" f5 toggles the Gundo plugin window
nnoremap <F5> :GundoToggle<CR>
let g:gundo_width=60

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                yankring                                 "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

let g:yankring_history_dir = '$HOME/.vim/tmp/'
" this is so that single char deletes don't end up in the yankring
let g:yankring_min_element_length = 2
let g:yankring_window_height = 14
nnoremap <silent> <leader>y :YRShow<CR>

" this makes Y yank from the cursor to the end of the line, which makes more
" sense than the default of yanking the whole current line (we can use yy for
" that)
function! YRRunAfterMaps()
    nnoremap Y :<C-U>YRYankCount 'y$'<CR>
endfunction

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                session                                  "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" you also need to run :SacurrentveSession once to create the default.vim session that
" will then be autoloaded/saved from then on

let g:session_autoload        = 'no'
let g:session_autosave        = 'yes'
let g:session_default_to_last = 'yes'
let g:session_directory       = '~/.vim/tmp/sessions'

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                tabular                                  "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" looks at the current line and the lines above and below it and aligns all the
" equals signs; useful for when we have several lines of declarations
nnoremap <Leader>a= :Tabularize /=<CR>
vnoremap <Leader>a= :Tabularize /=<CR>
" nnoremap <Leader>a/ :Tabularize /\/\//l2c1l0<CR>
" vnoremap <Leader>a/ :Tabularize /\/\//l2c1l0<CR>
nnoremap <Leader>a, :Tabularize /,/l0r1<CR>
vnoremap <Leader>a, :Tabularize /,/l0r1<CR>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                UltiSnips                                "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" we can't use <tab> as our snippet key since we use that with YouCompleteMe
" let g:UltiSnipsSnippetsDir         = $HOME . '/dotfiles/vim/UltiSnips'
let g:UltiSnipsExpandTrigger       = "<c-s>"
let g:UltiSnipsListSnippets        = "<c-m-s>"
" let g:UltiSnipsJumpForwardTrigger  = "<right>"
" let g:UltiSnipsJumpBackwardTrigger = "<left>"

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                ack.vim                                  "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

if executable('ag')
  let g:ackprg = "ag --nocolor --nogroup --column"
elseif executable('ack-grep')
  let g:ackprg = "ack-grep --nocolor --nogroup --column"
elseif executable('ack')
  let g:ackprg = "ack --nocolor --nogroup --column"
endif

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                               ListToggle                                "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

let g:lt_location_list_toggle_map = '<leader>i'
let g:lt_quickfix_list_toggle_map = '<leader>u'
let g:lt_height = 25

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                bufkill                                  "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Use the arrows for something useful
" :BB switches to the previous buffer shown in the current window, :BF switches
" to the next one; it's like a buffer history for every window
noremap <right> :BF<cr>
noremap <left> :BB<cr>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                              fuzzyfinder                                "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" " This turns on the mrufile and mrucmd modes
" let g:fuf_modesDisable    = []
" let g:fuf_mrufile_maxItem = 1000
" let g:fuf_mrucmd_maxItem  = 400
" let g:fuf_file_exclude    = '\v\~$|\.(o|exe|dll|bak|class|meta|lock|orig|jar|swp)$|/test/data\.|(^|[/\\])\.(hg|git|bzr)($|[/\\])'
"
" nnoremap <Leader>fm :FufMruFile<CR>
" nnoremap <Leader>fc :FufMruCmd<CR>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                fswitch                                  "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" A "companion" file is a .cpp file to an .h file and vice versa

" Opens the companion file in the current window
nnoremap <Leader>sh :FSHere<cr>

" Opens the companion file in the window to the left (window needs to exist)
" This is actually a duplicate of the :FSLeft command which for some reason
" doesn't work.
nnoremap <Leader>sl :call FSwitch('%', 'wincmd l')<cr>

" Same as above, only opens it in window to the right
nnoremap <Leader>sr :call FSwitch('%', 'wincmd r')<cr>

" Creates a new window on the left and opens the companion file in it
nnoremap <Leader>sv :FSSplitLeft<cr>

au BufEnter *.cc,*.cpp let b:fswitchdst  = 'h,hxx'
au BufEnter *.cc,*.cpp let b:fswitchlocs = './,reg:/src/include/,reg:|src|include/**|,../include'
au BufEnter *.h,*.cpp  let b:fswitchdst  = 'cpp,cc,c'
au BufEnter *.h,*.hpp  let b:fswitchlocs = './,reg:/include/src/,reg:/include.*/src/,../src'

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                vim-git                                  "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Turn on spell checking by default for git commit messages
au vimrc FileType gitcommit setlocal spell! spelllang=en_us


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                tagbar                                   "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" let g:tagbar_left = 1
let g:tagbar_sort = 0
nnoremap <F4> :TagbarToggle<cr><c-w>=
" CTags Update
nnoremap <F8> :!/usr/bin/ctags -R --c++-kinds=+p --fields=+liaS --extra=+q .

" TODO: here add a function to add stdlib from android and gles from android etc"

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                vim-notes                                "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

let g:notes_directories = ['~/notes']

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                syntastic                                "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""


" let g:syntastic_check_on_open = 1
let g:syntastic_error_symbol = '▶'
let g:syntastic_style_error_symbol = '▷'
let g:syntastic_warning_symbol = '▶'
let g:syntastic_style_warning_symbol = '▷'
let g:syntastic_enable_ballons = 1
highlight SyntasticErrorSign ctermfg=red
highlight SyntasticWarningSign ctermfg=yellow
let g:syntastic_always_populate_loc_list = 1
if executable('flake8')
  let g:syntastic_python_checkers = ['flake8']
  let g:syntastic_python_flake8_args = '--select=F,C9 --max-complexity=10'
endif
if exists('g:loaded_youcompleteme')
  let g:syntastic_cpp_checkers = ['ycm']
elseif executable('oclint')
  let g:syntastic_cpp_checkers = ['oclint']
endif

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                              YouCompleteMe                              "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" let g:ycm_autoclose_preview_window_after_completion = 1
" let g:ycm_autoclose_preview_window_after_insertion = 0
" let g:ycm_collect_identifiers_from_tags_files = 1
" " let g:ycm_add_preview_to_completeopt = 1
" let g:ycm_min_num_identifier_candidate_chars = 4
" let g:ycm_extra_conf_globlist = ['~/Research/inervis_sfm/*']
"
" nnoremap <leader>cc :YcmForceCompileAndDiagnostics<cr>
" nnoremap <leader>cg :YcmCompleter GoToDefinitionElseDeclaration<CR>
" nnoremap <leader>cf :YcmCompleter GoToDefinition<CR>
" nnoremap <leader>cd :YcmCompleter GoToDeclaration<CR>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                Airline                                  "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif
let g:airline_symbols.paste = 'Þ'
let g:airline_powerline_fonts = 1
let g:airline_theme = 'bubblegum'
let g:airline#extensions#whitespace#enabled = 0 " No whitespace warning, thanks
let g:airline_mode_map = {
      \ '__' : '-',
      \ 'n'  : 'NORMAL',
      \ 'i'  : 'INSERT',
      \ 'R'  : 'R',
      \ 'c'  : 'COMMAND',
      \ 'v'  : 'V char',
      \ 'V'  : 'V line',
      \ '' : 'V block',
      \ 's'  : 'S',
      \ 'S'  : 'S',
      \ '' : 'S',
      \ }
" Replace type and encoding with the file's working directory
" let g:airline_section_x = "%{airline#util#prepend(airline#extensions#tagbar#currenttag(),0)}"
let g:airline_section_x = "%{airline#extensions#tagbar#currenttag()}"
let g:airline_section_y = "%{airline#util#wrap(airline#parts#filetype(),0)}"

" let g:airline_section_y = "%{GetSmallPWD()}"
" function! GetSmallPWD()
"   let s:pwds = substitute(expand("%:p:h"), $HOME, "~", "")
"   return s:pwds
" endfunction


