set nocompatible                 " We're not in the 80's.
filetype off                     " Needed for vundle, will be turned on after.
set rtp+=~/.vim/bundle/vundle/   " Setup vundle
call vundle#rc()

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                               Vundle Packages                                "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Easily switch between header and source file
Bundle 'FSwitch'
" User <leader><leader> to get enhances vim-motions
Bundle 'Lokaltog/vim-easymotion'
" Beautiful status line
Bundle 'bling/vim-airline'
" Improve the behaviour of parenthesis, quotations, etc.
Bundle 'Raimondi/delimitMate'
" Easily show the quickfix and list windows
Bundle 'Valloric/ListToggle'
" Highlight math operators (+, -, *, ...).
Bundle 'Valloric/vim-operator-highlight'
" Intelli-awesome completer for python/c(++).
" Bundle 'Valloric/YouCompleteMe'
" Enhanced python highlighting
Bundle 'hdima/python-syntax'
" Autocomplete engine plus snippets from Shougo.
Bundle 'Shougo/neocomplete'
" This awesome plugin manager!
Bundle 'gmarik/vundle'
" Align all sorts of stuff.
Bundle 'godlygeek/tabular'
" Adds a window pane that shows the classes and methods on buffer (req: CTags).
Bundle 'majutsushi/tagbar'
" Parse the language and show if there are any syntax errors in the gutter.
Bundle 'scrooloose/syntastic'
" Use a key to show the undo tree of VIM. Amazing.
Bundle 'sjl/gundo.vim'
" Comment using sane mappings.
Bundle 'tomtom/tcomment_vim'
" Amazing plugin to use git inside vim, also add git commit types etc.
Bundle 'tpope/vim-fugitive'
" Official syntax, indent, and filetypes plugin for git.
Bundle 'tpope/vim-git'
" Extend repeat '.' for plugins, support for vim-surround comes built-in.
Bundle 'tpope/vim-repeat'
" All about surroundings, quotes, brackets, parens, etc.
Bundle 'tpope/vim-surround'
" Mighty cholorscheme!
Bundle 'w0ng/vim-hybrid'
" Mail attachment for mutt
Bundle 'chrisbra/CheckAttach'
" Better cpp syntax highlighting.
Bundle 'octol/vim-cpp-enhanced-highlight'
" Show git status info on gutter.
Bundle 'airblade/vim-gitgutter'
" Fuzzy finder along files and buffers.
Bundle 'kien/ctrlp.vim'
" Add c-compiled component to make it (much, much) faster.
Bundle 'JazzCore/ctrlp-cmatcher'
" Arguments of functions as text objects (ia, aa).
Bundle 'Parameter-Text-Objects'
" Google style for c++.
Bundle 'google.vim'
" Set tmuxline theme from airline's.
Bundle 'edkolev/tmuxline.vim'
" Navigate vim and tmux windows coherently.
Bundle 'christoomey/vim-tmux-navigator'
" Vundle packages ended, restore usual configuration:
augroup vimrc
  autocmd!
augroup END
filetype plugin indent on

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                General Settings                              "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" DISPLAY SETTINGS
syntax on
let g:hybrid_use_Xresources = 1 " So hybrid colorscheme matches terminal colors.
colorscheme hybrid              " Sets the awesome colorscheme.
set background=dark             " Enable for dark terminals.
set scrolloff=2                 " n lines above/below cursor when scrolling.
set showmatch                   " Show matching bracket (briefly jump):
set matchtime=2                 " Reduces matching paren blink time.
set title                       " Show file and folder in titlebar.
set laststatus=2                " Show statusline always (for airline).
set cmdheight=2                 " Num of screen lines for the command-line.
set undofile                    " Stores undo state even when files are closed:
set undodir^=~/.vim/tmp/undo    " Folder needs to exist.
set cursorline                  " Highlights the current line.
set winaltkeys=no               " Turns off the Alt key bindings of the GUI.
set number                      " Show line numbers.
set listchars=tab:›\ ,eol:¬     " Characters for tab and CR in list mode
" set the char of the vertical split (no comments afer following line):
set fillchars+=vert:\ "

" AUTOCOMPLETE OPTIONS
set wildmenu                 " completion with menu
set wildmode=longest,list,full
set completeopt=menu,menuone,longest

" EDITOR SETTINGS
set ignorecase               " Case insensitive searching,
set smartcase                " but become case sensitive intelligently.
set timeoutlen=500           " Wait for 1.5 secs on key-mappings.
set ttimeoutlen=40           " Wait for 50mS for key-codes.
set magic                    " Change the way backslashes are used in searches.
set bs=indent,eol,start      " Allow backspacing over everything in insert mode.
set nobackup                 " No backup~ files.
set noswapfile               " Don't use old useless swaps.
set nowb                     " No backup when overwriting.
set fileformat=unix          " File mode is unix.
set fileformats=unix,dos,mac " Detect unix, dos, mac file formats in that order.
let g:is_bash = 1            " Defaults .sh files to be treated as bash.
let g:is_posix = 1           " Highlight as bash, not shell.

" GOOGLE C++ STYLE (some are redundant with google.vim)
set autoindent               " On new lines, match indent of previous line
set copyindent               " Copy the previous indentation on autoindenting
set cindent                  " Smart indenting for c-like code
set cino=b1,g0,N-s,t0,(0,W4  " See :h cinoptions-values
set smarttab                 " Smart tab handling for indenting
set tabstop=2                " Number of spaces a tab counts for
set shiftwidth=2             " Spaces for autoindents
set softtabstop=2
set shiftround               " Makes indenting a multiple of shiftwidth
set expandtab                " Turn a tab into spaces
set noshowmode               " Don't show the mode (" -- INSERT -- ").
set textwidth=80             " Enforce a specified line length.
set colorcolumn=+1           " Highlight column after textwidth.

" VIM SPECIFIC
set viminfo='20,\"700   " Remember copy registers after quitting in the .viminfo
                        " file -- 20 jump links, regs up to 700 lines'.
set switchbuf=useopen   " When switching bufer jump to the first window with it.
set hidden              " Allows making buffers hidden with unsaved changes.
set history=2000        " Remember more commands and search history.
set undolevels=3500     " Use many, many levels of undo.
set autoread            " Auto read when a file is changed from the outside.
set mouse=a             " Enables the mouse in all modes.
set pastetoggle=<F2>    " Paste mode prevents the insertion of extra whitespace.
set mousemodel=extend   " Right mouse click extends selection.
set shortmess=a         " Avoid the 'hit enter to continue' messages.
set nohlsearch          " Do not highlight searched-for phrases.
set incsearch           " But do highlight-as-I-type the search string.
set guioptions-=T       " Remove clutter from gVim, if on gVim.
set guioptions-=l
set guioptions-=L
set guioptions-=r
set guioptions-=R
set guioptions-=m
set guioptions-=M
" Turn off all visual bells:
set noerrorbells visualbell t_vb=
autocmd vimrc GUIEnter * set visualbell t_vb=

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                               More Involved Tweaks                           "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Unicode support (from http://vim.wikia.com/wiki/Working_with_Unicode)
if has("multi_byte")
  if &termencoding == ""
    let &termencoding = &encoding
  endif
  set encoding=utf-8
  setglobal fileencoding=utf-8
  set fileencodings=ucs-bom,utf-8,latin1
endif

" Select the correct clipboard.
if has('unnamedplus')
  set clipboard=unnamedplus,unnamed
else
  set clipboard+=unnamed
endif

" Deactivate cindent for more simple text files.
autocmd vimrc FileType mail,tex,plaintex,text,markdown,gitcommit set nocindent

" Change cursor to a bar when in insert mode for console VIM
" some terminals (e.g. Konsole) will report $TERM as xterm, so
" without a smarter script to determine the emulator (i.e. termname)
" this might fail.
if !has('gui_running')
  if !executable('termname')
    let s:termname = &term
  else
    let s:termname = system('termname')
  endif
  if s:termname =~ 'xterm'
    " solid bar
    let &t_SI .= "\<Esc>[6 q"
    " solid block
    let &t_EI .= "\<Esc>[2 q"
  endif
endif

" Wrap text only at break locations for text and .tex files.
au Filetype tex call SetupTextFile()
au Filetype text call SetupTextFile()
au Filetype mail call SetupMail()

" Set up our plugins to play nice with mutt.
function! SetupMail()
  setlocal nonumber
  setlocal norelativenumber
endfunction!

function! SetupTextFile()
  setlocal spell
  let &l:showbreak='¤ '
  setlocal wrap
  setlocal linebreak
  setlocal nonumber
endfunction!

" Return to last edit position when opening files.
autocmd BufReadPost *
     \ if line("'\"") > 0 && line("'\"") <= line("$") |
     \   exe "normal! g`\"" |
     \ endif

" Special consideration for quickfix
autocmd BufReadPost quickfix call SetupHelpPane()
function! SetupHelpPane()
  setlocal norelativenumber
  setlocal colorcolumn=""
endfunction

" Don't close window, when deleting a buffer
command! Bclose call <SID>BufcloseCloseIt()
function! <SID>BufcloseCloseIt()
   let l:currentBufNum = bufnr("%")
   let l:alternateBufNum = bufnr("#")
   if buflisted(l:alternateBufNum)
     buffer #
   else
     bnext
   endif
   if bufnr("%") == l:currentBufNum
     new
   endif
   if buflisted(l:currentBufNum)
     execute("bdelete! ".l:currentBufNum)
   endif
endfunction!

" Close anything in a smart way.
function! <SID>SmartClose()
  if len(filter(range(1, bufnr('$')), 'buflisted(v:val)')) > 1
    call <SID>BufcloseCloseIt()
  else
    execute("quit")
  endif
endfunction!

" Printer options, optimized for A4, 80-char sized textwidth
set popt=left:0pc,right:1pc,paper:A4,header:2,number:y
set printheader=%<\ \ \ %f%h%m%=%N\ of\ %{(line('$')+72)/73}
set printfont=courier:h11
set printexpr=PrintFile(v:fname_in)
function PrintFile(fname)
  call system("lpr -o page-bottom=15 -o page-top=15 -o page-left=40 -o page-right=40  -o page-border=single -o number-up=2 -o sides=two-sided-long-edge -o media=A4 " . a:fname)
  call delete(a:fname)
  return v:shell_error
endfunc
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                            Custom Mappings                              "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let mapleader=","
let maplocalleader="\\"
" This makes vim's regex engine 'not stupid' see :h magic.
nnoremap / /\v
vnoremap / /\v
" Type jj quickly to exit insert mode.
inoremap jj <Esc>
" Type j; to quickly exit insert mode and insert a ';' at the en of the line.
inoremap j; <Esc>A;<Esc>
" This command will allow us to save a file we don't have permission to save.
cnoremap w!! w !sudo tee % >/dev/null
" These create newlines like o and O but stay in normal mode.
nnoremap <silent> zj o<Esc>k
nnoremap <silent> zk O<Esc>j
" Scroll through command history from home row.
cnoremap <c-j> <down>
cnoremap <c-k> <up>
" zv unfolds any fold if the cursor suddenly appears inside a fold.
nnoremap * *zv
nnoremap # #zv
nnoremap n nzv
nnoremap N Nzv
" In normal mode, we use : much more often than ; so lets swap them.
nnoremap ; :
nnoremap : ;
vnoremap ; :
vnoremap : ;
" This makes j and k work on 'screen lines' instead of on 'file lines'.
nnoremap j gj
nnoremap k gk
" Quickly move between windows: h left, l right, k up, j down.
noremap <leader>h <c-w>h
noremap <leader>l <c-w>l
noremap <leader>k <c-w>k
noremap <leader>j <c-w>j
" Switch to the directory of the open buffer.
noremap <leader>cd :cd %:p:h<cr>
" Get spelling suggestions.
noremap <leader>s<leader> z=
" Toggle and untoggle spell checking.
noremap <leader>ss :setlocal spell! spelllang=en_us<cr>
au vimrc FileType gitcommit setlocal spell! spelllang=en_us
" Remain in visual mode after indenting selection.
vnoremap < <gv
vnoremap > >gv
" Mappings to move lines.
nnoremap <silent><C-S-j> :m .+1<CR>==
nnoremap <silent><C-S-k> :m .-2<CR>==
vnoremap <silent><C-S-j> :m '>+1<CR>gv=gv
vnoremap <silent><C-S-k> :m '<-2<CR>gv=gv
" Go to next buffer easily.
nnoremap <tab> :bn <CR>
nnoremap <S-tab> :bp <CR>
" Fast saving.
nnoremap <leader>w :w<cr>
" Control D deletes current buffer (function defined above).
nnoremap <leader>d :Bclose<CR>
" Smart close (function defined above).
noremap <Leader>q :call <SID>SmartClose()<cr>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                CheckAttach                                   "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:checkattach_filebrowser = 'ranger'  " Use ranger to browse for files.

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                  Gundo                                       "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
nnoremap <F5> :GundoToggle<CR>
let g:gundo_width=60

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                     TODO!!  Neocomplete                                      "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Use neocomplete.
let g:neocomplete#enable_at_startup = 1
" Use smartcase.
let g:neocomplete#enable_smart_case = 1
" Set minimum syntax keyword length.
let g:neocomplete#sources#syntax#min_keyword_length = 3
let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'

" Define dictionary.
let g:neocomplete#sources#dictionary#dictionaries = {
    \ 'default' : '',
    \ 'vimshell' : $HOME.'/.vimshell_hist',
    \ 'scheme' : $HOME.'/.gosh_completions'
        \ }

" Define keyword.
if !exists('g:neocomplete#keyword_patterns')
    let g:neocomplete#keyword_patterns = {}
endif
let g:neocomplete#keyword_patterns['default'] = '\h\w*'

" Plugin key-mappings.
inoremap <expr><C-g>     neocomplete#undo_completion()
inoremap <expr><C-k>     neocomplete#complete_common_string()

" Toggle the plugin.
nnoremap <F10> :NeoCompleteToggle<cr>

" Recommended key-mappings.
" <CR>: close popup and save indent.
inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function()
  return neocomplete#close_popup() . "\<CR>"
  " For no inserting <CR> key.
  "return pumvisible() ? neocomplete#close_popup() : "\<CR>"
endfunction
" <TAB>: completion.
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
" <C-h>, <BS>: close popup and delete backword char.
inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
" inoremap <expr><C-y>  neocomplete#close_popup()
" inoremap <expr><C-e>  neocomplete#cancel_popup()
" Close popup by <Space>.
"inoremap <expr><Space> pumvisible() ? neocomplete#close_popup() : "\<Space>"

" AutoComplPop like behavior.
"let g:neocomplete#enable_auto_select = 1

" Enable heavy omni completion.
if !exists('g:neocomplete#sources#omni#input_patterns')
  let g:neocomplete#sources#omni#input_patterns = {}
endif
let g:neocomplete#sources#omni#input_patterns.c =
      \ '[^.[:digit:] *\t]\%(\.\|->\)'
let g:neocomplete#sources#omni#input_patterns.cpp =
      \ '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                               ListToggle                                     "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Toggle list, mainly used along syntastic to check for errors.
let g:lt_location_list_toggle_map = 'tl'
" Toggle quickfix
let g:lt_quickfix_list_toggle_map = 'tq'
let g:lt_height = 12

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                 FSwitch                                      "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Opens the companion file in the current window.
nnoremap <Leader>sh :FSHere<cr>
au BufEnter *.cc,*.cpp let b:fswitchdst  = 'h,hpp,hxx'
au BufEnter *.cc,*.cpp let b:fswitchlocs =
      \'./,reg:/src/include/,reg:|src|include/**|,../include'
au BufEnter *.h,*.hpp  let b:fswitchdst  = 'cc,cpp,c'
au BufEnter *.h,*.hpp  let b:fswitchlocs =
      \ './,reg:/include/src/,reg:/include.*/src/,../src'

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                 Tagbar                                       "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:tagbar_sort = 0
" A bit wider on workspace monitor
let g:tagbar_width = 46
" Put cursor on tagbar when we first open
let g:tagbar_autofocus = 1
nnoremap <F4> :TagbarToggle<cr><c-w>=

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                 Syntastic                                    "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:syntastic_error_symbol = '▶'
let g:syntastic_style_error_symbol = '▷'
let g:syntastic_warning_symbol = '▶'
let g:syntastic_style_warning_symbol = '▷'
highlight SyntasticErrorSign ctermfg=red
highlight SyntasticWarningSign ctermfg=yellow
let g:syntastic_always_populate_loc_list = 1
let b:syntastic_checkers = ['pylint']
" Make pylint work with 2-space indentation and allow uppercase variables.
let g:syntastic_python_pylint_args = "--indent-string='  ' --disable=C0103"
" TODO
" if exists('g:loaded_youcompleteme')
"   let g:syntastic_cpp_checkers = ['ycm']
" elseif executable('oclint')
"   let g:syntastic_cpp_checkers = ['oclint']
" endif
au Filetype cpp call SetupCPPFile()
function! SetupCPPFile()
  " Check if we are in a specific project, else do nothing for now.
  if stridx(expand('%:p'), 'RedwoodInternal') != -1
    let b:syntastic_checkers = ['cpplint']
    let g:syntastic_cpp_cpplint_exec =
    \ '/home/fede/code/redwood_ws/RedwoodInternal/Redwood/tools/lint/cpplint.py'
    let g:syntastic_cpp_cpplint_args = '--verbose=1'
    let g:syntastic_cpp_cpplint_thres = 99
    let g:syntastic_stl_format = '%E{E: %fe}%B{, }%W{W: %fw}'
  endif
endfunction!

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                   Airline                                    "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif
let g:airline_symbols.paste = 'Þ'
let g:airline_powerline_fonts = 1
let g:airline_theme = 'bubblegum'
let g:airline#extensions#whitespace#enabled = 1
" Enable summary of changeset of the current working tree.
let g:airline_enable_hunks = 1
let g:airline_mode_map = {
      \ '__' : '-',
      \ 'n'  : 'N',
      \ 'i'  : 'I',
      \ 'R'  : 'R',
      \ 'c'  : 'C',
      \ 'v'  : 'V ch',
      \ 'V'  : 'V li',
      \ '' : 'V bl',
      \ 's'  : 'S',
      \ 'S'  : 'S',
      \ '' : 'S',
      \ }
" No filename no bufferline. Place just the non-modifiable icon on this section.
let g:airline_section_c =
\ '%#__accent_red#%{airline#util#wrap(airline#parts#readonly(),0)}%#__restore__#'
" Current function we are located at (extracted from tagbar).
let g:airline_section_x =
      \ '%{airline#util#wrap(airline#extensions#tagbar#currenttag(),0)}'
let g:airline_section_y = airline#section#create(['filetype'])
" Use tabline so that buffers show at the top where there is more space.
let g:airline#extensions#tabline#enabled = 1
" Don't show whether we are displaying tabs or buffers, I never use tabs.
let g:airline#extensions#tabline#show_tab_type = 0
" Min number of buffers to display them at the top.
let g:airline#extensions#tabline#buffer_min_count = 2
" Format of the filename for the buffer.
let g:airline#extensions#tabline#fnamemod = ':t'
" Display parent directory if buffer is duplicated.
let g:airline#extensions#tabline#formatter = 'unique_tail_improved'
" Straight separators for buffers.
let g:airline#extensions#tabline#left_sep = ''
let g:airline#extensions#tabline#left_alt_sep = '|'
" For git hunks, just show them if they are non-zero.
let g:airline#extensions#hunks#non_zero_only = 1
" Display the current function in the status line.
let g:airline#extensions#tagbar#enabled = 1

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                    CtrlP                                     "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Set ignore to 1 and use with g:ctrlp_custom_ignore to filer folders.
let g:ctrlp_user_command = {
  \ 'types': {
    \ 1: ['.git', 'cd %s && git ls-files'],
    \ },
  \ 'fallback': 'find %s -type f',
  \ 'ignore': 0
  \ }
let g:ctrlp_match_func = {'match' : 'matcher#cmatch' }
" Search files of project.
let g:ctrlp_map = 'tt'
" Search tags of current buffer.
nnoremap tf :CtrlPBufTag<cr>
" Search current open buffers.
nnoremap tb :CtrlPBuffer<cr>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                            Parameter-Text-Object                             "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Remap to have same behavior as other plugins.
let g:no_parameter_object_maps = 1
vmap <silent> ia <Plug>ParameterObjectI
omap <silent> ia <Plug>ParameterObjectI
vmap <silent> aa <Plug>ParameterObjectA
omap <silent> aa <Plug>ParameterObjectA

" Redraw our screen to avoid garbage from showing up
autocmd VimEnter * redraw!
autocmd VimEnter * redraw!


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                           Python Enhanced Syntax                             "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let python_version_2 = 1

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                 Tmuxline                                     "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:tmuxline_preset = {
      \'a'    : '#S',
      \'b'    : '#(whoami)',
      \'c'    : '↑#(uptime | cut -d " " -f 1,2)',
      \'win'  : ['#I', '#W'],
      \'cwin' : ['#I', '#W#F'],
      \'x'    : ["#(date +'%a, %b %d')"],
      \'y'    : '%R',
      \'z'    : '⌂ #H'}
