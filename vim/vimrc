set nocompatible

" Needed for vundle, will be turned on after vundle inits
filetype off

" Setup vundle
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                          Vundle configuration                           "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" These need to come before the configuration options for the plugins since
" sundle will add the plugin folders to the runtimepath only after it has seen
" the plugin's Bundle command.

" Easily switch between header and source file
Bundle 'FSwitch'

" User <leader><leader> to get enhances vim-motions
Bundle 'Lokaltog/vim-easymotion'

" Beautiful status line
Bundle 'bling/vim-airline'

" Bufferline to show current open buffers
" Bundle 'bling/vim-bufferline'

" Improve the behaviour of parenthesis, quotations, etc.
Bundle 'Raimondi/delimitMate'

" Add the :Rename command to change the name of the buffer
" Bundle 'Rename'

" Ultimate snippets!
" Bundle 'SirVer/ultisnips'

" Easily show the quickfix and list windows
Bundle 'Valloric/ListToggle'

" Highlight math operators (+, -, *, ...)
Bundle 'Valloric/vim-operator-highlight'

" Intelli-awesome completer for python/c(++)
" Bundle 'Valloric/YouCompleteMe'

" This awesome plugin manager!
Bundle 'gmarik/vundle'

" Align all sorts of stuff
Bundle 'godlygeek/tabular'

" Adds a window pane that shows the classes and methods on buffer (req: Exh-CTags)
Bundle 'majutsushi/tagbar'

" Parse the language and show if there are any syntax errors in the gutter
Bundle 'scrooloose/syntastic'

" Use a key to show the undo tree of VIM. Amazing.
Bundle 'sjl/gundo.vim'

" Comment using sane mappings
Bundle 'tomtom/tcomment_vim'

" Amazing plugin to use git inside vim, also add git commit types etc.
Bundle 'tpope/vim-fugitive'

" Official syntax, indent, and filetypes plugin for git
Bundle 'tpope/vim-git'

" Extend repeat '.' for plugins, support for vim-surround comes built-in
Bundle 'tpope/vim-repeat'

" All about surroundings, quotes, brackets, parens, etc
Bundle 'tpope/vim-surround'

" Mighty cholorscheme!
Bundle 'w0ng/vim-hybrid'

" See all colors available
" Bundle 'xterm-color-table.vim'

" Mail attachment for mutt
Bundle 'chrisbra/CheckAttach'

" Better cpp syntax highlighting
Bundle 'octol/vim-cpp-enhanced-highlight'

" Show git status info on gutter
Bundle 'airblade/vim-gitgutter'

" Fuzzy finder along files and buffers
Bundle 'kien/ctrlp.vim'
" Add c-compiled component to make it (much) faster
Bundle 'JazzCore/ctrlp-cmatcher'

" Arguments of functions as text objects (ia, aa)
Bundle 'Parameter-Text-Objects'

" Google style for c++
Bundle 'google.vim'

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                         End of Vundle Packages                          "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
augroup vimrc
  autocmd!
augroup END
filetype plugin indent on

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                            General settings                             "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" DISPLAY SETTINGS
let g:hybrid_use_Xresources = 1 " tell hybrid colorscheme to match terminal colors
colorscheme hybrid              " sets the colorscheme
set background=dark             " enable for dark terminals
set scrolloff=2                 " 2 lines above/below cursor when scrolling
set showmatch                   " show matching bracket (briefly jump)
set matchtime=2                 " reduces matching paren blink time from the 5[00]ms def
set showmode                    " show mode in status bar (insert/replace/...)
set showcmd                     " show typed command in status bar
set ruler                       " show cursor position in status bar
set title                       " show file in titlebar
set undofile                    " stores undo state even when files are closed (in undodir)
set undodir^=~/.vim/tmp/undo
set cursorline                  " highlights the current line
set winaltkeys=no               " turns of the Alt key bindings to the gui menu
set timeoutlen=500             " Wait for 1.5 secs on key-mappings
set ttimeoutlen=40              " Wait for 50mS for key-codes
let g:is_bash = 1               " Force .sh to be treated as bash
" set foldmethod=syntax

" When you type the first tab, it will complete as much as possible, the second
" tab hit will provide a list, the third and subsequent tabs will cycle through
" completion options so you can complete the file without further keys
set wildmode=longest,list,full
set wildmenu            " completion with menu
" This changes the default display of tab and CR chars in list mode
set listchars=tab:›\ ,eol:¬

" The "longest" option makes completion insert the longest prefix of all
" the possible matches; see :h completeopt
set completeopt=menu,menuone,longest
set switchbuf=useopen,usetab

" EDITOR SETTINGS
set ignorecase               " case insensitive searching
set smartcase                " but become case sensitive if you type uppercase characters
set autoindent               " on new lines, match indent of previous line
set copyindent               " copy the previous indentation on autoindenting
set cindent                  " smart indenting for c-like code
set cino=b1,g0,N-s,t0,(0,W4  " see :h cinoptions-values
" set the char of the vertical split:
set fillchars+=vert:\ "
set smarttab                 " smart tab handling for indenting
set magic                    " change the way backslashes are used in search patterns
set bs=indent,eol,start      " Allow backspacing over everything in insert mode
set nobackup                 " no backup~ files.
set noswapfile               " don't use old useless swaps
set nowb                     " No backup when overwriting

set number                   " Show line numbers

set tabstop=2                " number of spaces a tab counts for
set shiftwidth=2             " spaces for autoindents
set softtabstop=2
set shiftround               " makes indenting a multiple of shiftwidth
set expandtab                " turn a tab into spaces
set laststatus=2             " the statusline is now always shown
set noshowmode               " don't show the mode (" -- INSERT -- ") at the bottom

set fileformat=unix          " file mode is unix
set fileformats=unix,dos,mac " detects unix, dos, mac file formats in that order

set viminfo='20,\"700       " remember copy registers after quitting in the .viminfo
                             " file -- 20 jump links, regs up to 700 lines'

set hidden                   " allows making buffers hidden even with unsaved changes
set history=2000             " remember more commands and search history
set undolevels=3500          " use many levels of undo
set autoread                 " auto read when a file is changed from the outside
set mouse=a                  " enables the mouse in all modes

" toggles vim's paste mode; when we want to paste something into vim from a
" different application, turning on paste mode prevents the insertion of extra
" whitespace
set pastetoggle=<F2>

" Right-click on selection should bring up a menu
set mousemodel=popup_setpos

" With this, the gui (gvim) now doesn't have the toolbar, the left
" and right scrollbars and the menu.
set guioptions-=T
set guioptions-=l
set guioptions-=L
set guioptions-=r
set guioptions-=R
set guioptions-=m
set guioptions-=M

" this makes sure that shell scripts are highlighted
" as bash scripts and not sh scripts
let g:is_posix = 1

" tries to avoid those annoying "hit enter to continue" messages
" if it still doesn't help with certain commands, add a second <cr>
" at the end of the map command
set shortmess=a

" Look for tag def in a "tags" file in the dir of the current file, then for
" that same file in every folder above the folder of the current file, until the
" root.
" set tags=./tags;/

" turns off all error bells, visual or otherwise
set noerrorbells visualbell t_vb=
autocmd vimrc GUIEnter * set visualbell t_vb=

" Switch syntax highlighting on, when the terminal has colors
if &t_Co > 2 || has("gui_running")
  syntax on
endif

" Number of screen lines to use for the command-line
set cmdheight=2

" allow backspace and cursor keys to cross line boundaries
set whichwrap+=<,>,h,l
set nohlsearch          " do not highlight searched-for phrases
set incsearch           " ...but do highlight-as-I-type the search string
set gdefault            " this makes search/replace global by default

" enforces a specified line-length and auto inserts hard line breaks when we
" reach the limit; in Normal mode, you can reformat the current paragraph with
" gqap.
set textwidth=80

" this makes the color after the textwidth column highlighted
set colorcolumn=+1

" options for formatting text; see :h formatoptions
" set formatoptions=tcroqnj

if v:version >= 704
  " The new Vim regex engine is currently slooooow as hell which makes syntax
  " highlighting slow, which introduces typing latency.
  " Consider removing this in the future when the new regex engine becomes
  " faster.
  set regexpengine=1
endif

if has('unnamedplus')
  " By default, Vim will not use the system clipboard when yanking/pasting to
  " the default register. This option makes Vim use the system default
  " clipboard.
  " Note that on X11, there are _two_ system clipboards: the "standard" one, and
  " the selection/mouse-middle-click one. Vim sees the standard one as register
  " '+' (and this option makes Vim use it by default) and the selection one as
  " '*'.
  " See :h 'clipboard' for details.
  set clipboard=unnamedplus,unnamed
else
  " Vim now also uses the selection system clipboard for default yank/paste.
  set clipboard+=unnamed
endif


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                           More involved tweaks                          "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Unicode support (taken from http://vim.wikia.com/wiki/Working_with_Unicode)
if has("multi_byte")
  if &termencoding == ""
    let &termencoding = &encoding
  endif
  set encoding=utf-8
  setglobal fileencoding=utf-8
  set fileencodings=ucs-bom,utf-8,latin1
endif

" cindent is a bit too smart for its own good and triggers in text files when
" you're typing inside parens and then hit enter; it aligns the text with the
" opening paren and we do NOT want this in text files!
autocmd vimrc FileType text,markdown,gitcommit set nocindent

" Change cursor to a bar when in insert mode for console VIM
" some terminals (e.g. Konsole) will report $TERM as xterm, so
" without a smarter script to determine the emulator (i.e. termname)
" this might fail
if !has('gui_running')
  if !executable('termname')
    let s:termname = &term
  else
    let s:termname = system('termname')
  endif
  if s:termname =~ 'xterm'
    " solid bar
    let &t_SI .= "\<Esc>[6 q"
    " solid block
    let &t_EI .= "\<Esc>[2 q"
  elseif s:termname =~ 'gnome-terminal'
    au InsertEnter * silent execute "!gconftool-2 --type string --set /apps/gnome-terminal/profiles/Solarized/cursor_shape ibeam"
    au InsertLeave * silent execute "!gconftool-2 --type string --set /apps/gnome-terminal/profiles/Solarized/cursor_shape block"
    au VimLeave * silent execute "!gconftool-2 --type string --set /apps/gnome-terminal/profiles/Solarized/cursor_shape block"
  endif
endif

" Wrap text only at break locations for text and .tex files
au Filetype tex call SetupTextFile()
au Filetype text call SetupTextFile()
au Filetype mail call SetupMail()

" Set up our plugins to play nice with mutt
function! SetupMail()
  setlocal nonumber
  setlocal norelativenumber
endfunction!

function! SetupTextFile()
  setlocal spell
  let &l:showbreak='¤ '
  setlocal wrap
  setlocal linebreak
  setlocal nonumber
endfunction!


" Return to last edit position when opening files
autocmd BufReadPost *
     \ if line("'\"") > 0 && line("'\"") <= line("$") |
     \   exe "normal! g`\"" |
     \ endif

" Special consideration for quickfix
autocmd BufReadPost quickfix call SetupHelpPane()
function! SetupHelpPane()
  setlocal norelativenumber
  setlocal colorcolumn=""
endfunction

" Don't close window, when deleting a buffer
command! Bclose call <SID>BufcloseCloseIt()
function! <SID>BufcloseCloseIt()
   let l:currentBufNum = bufnr("%")
   let l:alternateBufNum = bufnr("#")

   if buflisted(l:alternateBufNum)
     buffer #
   else
     bnext
   endif

   if bufnr("%") == l:currentBufNum
     new
   endif

   if buflisted(l:currentBufNum)
     execute("bdelete! ".l:currentBufNum)
   endif
endfunction!
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                            custom mappings                              "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" our <leader> will be the ',' key
let mapleader=","

" our <localleader> will be the '\' key
let maplocalleader="\\"

" this makes vim's regex engine 'not stupid' see :h magic
nnoremap / /\v
vnoremap / /\v

" Type jj quickly to exit insert mode
inoremap jj <Esc>

" Type j; to quickly exit insert mode and insert a ';' at the en of the line
inoremap j; <Esc>A;<Esc>

" This command will allow us to save a file we don't have permission to save
" *after* we have already opened it. Super useful.
cnoremap w!! w !sudo tee % >/dev/null

" These create newlines like o and O but stay in normal mode
nnoremap <silent> zj o<Esc>k
nnoremap <silent> zk O<Esc>j

" Now we don't have to move our fingers so far when we want to scroll through
" the command history; also, don't forget the q: command (see :h q: for more
" info)
cnoremap <c-j> <down>
cnoremap <c-k> <up>

" zv unfolds any fold if the cursor
" suddenly appears inside a fold.
nnoremap * *zv
nnoremap # #zv
nnoremap n nzv
nnoremap N Nzv

" Also center the screen when jumping through the changelist
nnoremap g; g;zz
nnoremap g, g,zz

" In normal mode, we use : much more often than ; so lets swap them.
" WARNING: this will cause any "ordinary" map command without the "nore" prefix
" that uses ":" to fail. For instance, "map <f2> :w" would fail, since vim will
" read ":w" as ";w" because of the below remappings. Use "noremap"s in such
" situations and you'll be fine.
nnoremap ; :
nnoremap : ;
vnoremap ; :
vnoremap : ;

" This makes j and k work on "screen lines" instead of on "file lines"; now, when
" we have a long line that wraps to multiple screen lines, j and k behave as we
" expect them to.
nnoremap j gj
nnoremap k gk

" Use Q for formatting the current paragraph (or visual selection)
vnoremap Q gq
nnoremap Q gqap

" Close window
noremap <Leader>q :call <SID>SmartClose()<cr>
" Smart close
function! <SID>SmartClose()
  if len(filter(range(1, bufnr('$')), 'buflisted(v:val)')) > 1
    call <SID>BufcloseCloseIt()
  else
    execute("quit")
  endif
endfunction!

" Fast saving
nnoremap <leader>w :w<cr>

" Control D deletes current buffer
nnoremap <leader>d :Bclose<CR>

" key bindings for quickly moving between windows
" h left, l right, k up, j down
noremap <leader>h <c-w>h
noremap <leader>l <c-w>l
noremap <leader>k <c-w>k
noremap <leader>j <c-w>j

" Switch to the directory of the open buffer
noremap <leader>cd :cd %:p:h<cr>

" spelling shortcuts using <leader>
" ]s next misspelled word
" [s previous misspelled word
" zg add to dict
" z= get suggestions
noremap <leader>sn ]s
noremap <leader>sp [s
noremap <leader>sa zg
noremap <leader>s<leader> z=
" Toggle and untoggle spell checking
noremap <leader>ss :setlocal spell! spelllang=en_us<cr>
au vimrc FileType gitcommit setlocal spell! spelllang=en_us

" Using '<' and '>' in visual mode to shift code by a tab-width left/right by
" default exits visual mode. With this mapping we remain in visual mode after
" such an operation.
vnoremap < <gv
vnoremap > >gv

" Mappings to move lines
nnoremap <C-j> :m .+1<CR>==
nnoremap <C-k> :m .-2<CR>==
vnoremap <C-j> :m '>+1<CR>gv=gv
vnoremap <C-k> :m '<-2<CR>gv=gv

" Go to next buffer easily
nnoremap <tab> :bn <CR>
nnoremap <S-tab> :bp <CR>

" -- CheckAttach
let g:checkattach_filebrowser = 'ranger'

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                 Gundo                                   "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
nnoremap <F5> :GundoToggle<CR>
let g:gundo_width=60

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                tabular                                  "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" looks at the current line and the lines above and below it and aligns all the
" equals signs; useful for when we have several lines of declarations
nnoremap <Leader>a= :Tabularize /=<CR>
vnoremap <Leader>a= :Tabularize /=<CR>
nnoremap <Leader>a/ :Tabularize /\/\//l2c1l0<CR>
vnoremap <Leader>a/ :Tabularize /\/\//l2c1l0<CR>
nnoremap <Leader>a, :Tabularize /,/l0r1<CR>
vnoremap <Leader>a, :Tabularize /,/l0r1<CR>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                UltiSnips                                "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" we can't use <tab> as our snippet key since we use that with YouCompleteMe
" let g:UltiSnipsSnippetsDir         = $HOME . '/dotfiles/vim/UltiSnips'
" let g:UltiSnipsExpandTrigger       = "<c-s>"
" let g:UltiSnipsListSnippets        = "<c-m-s>"
" let g:UltiSnipsJumpForwardTrigger  = "<right>"
" let g:UltiSnipsJumpBackwardTrigger = "<left>"

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                               ListToggle                                "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Toggle list
let g:lt_location_list_toggle_map = 'tl'
" Toggle quickfix
let g:lt_quickfix_list_toggle_map = 'tq'
let g:lt_height = 15

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                fswitch                                  "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Opens the companion file in the current window
nnoremap <Leader>sh :FSHere<cr>

au BufEnter *.cc,*.cpp let b:fswitchdst  = 'h,hxx'
au BufEnter *.cc,*.cpp let b:fswitchlocs = './,reg:/src/include/,reg:|src|include/**|,../include'
au BufEnter *.h,*.cpp  let b:fswitchdst  = 'cpp,cc,c'
au BufEnter *.h,*.hpp  let b:fswitchlocs = './,reg:/include/src/,reg:/include.*/src/,../src'

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                tagbar                                   "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" " let g:tagbar_left = 1
" let g:tagbar_sort = 0
"
" " A bit wider on workspace monitor
let g:tagbar_width = 46
"
" " Put cursor on tagbar when we first open
let g:tagbar_autofocus = 1
"
" " Show line number of tag. Use = 2 to show relative numbers
" let g:tagbar_show_linenumbers = 1
"
" " Unfold tags to show current scope
" let g:tagbar_autoshowtag = 1
nnoremap <F4> :TagbarToggle<cr><c-w>=
" " CTags Update
" nnoremap <F8> :!/usr/bin/ctags -R --c++-kinds=+p --fields=+liaS --extra=+q .

" TODO: here add a function to add stdlib from android and gles from android etc"

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                syntastic                                "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:syntastic_error_symbol = '▶'
let g:syntastic_style_error_symbol = '▷'
let g:syntastic_warning_symbol = '▶'
let g:syntastic_style_warning_symbol = '▷'
highlight SyntasticErrorSign ctermfg=red
highlight SyntasticWarningSign ctermfg=yellow
let g:syntastic_always_populate_loc_list = 1
if executable('flake8')
  let g:syntastic_python_checkers = ['flake8']
  let g:syntastic_python_flake8_args = '--select=F,C9 --max-complexity=10'
endif
if exists('g:loaded_youcompleteme')
  let g:syntastic_cpp_checkers = ['ycm']
elseif executable('oclint')
  let g:syntastic_cpp_checkers = ['oclint']
endif
" Use cpplint for google projects
au Filetype cpp call SetupCPPFile()
function! SetupCPPFile()
  if stridx(expand('%:p'), 'RedwoodInternal') != -1 
    let b:syntastic_checkers = ['gcc', 'cpplint'] 
    let g:syntastic_aggregate_errors = 1
    " let g:syntastic_check_on_open = 1
    let g:syntastic_cpp_check_header = 1
    let g:syntastic_cpp_no_include_search = 1
    let g:syntastic_cpp_no_default_include_dirs = 1
    let g:syntastic_cpp_auto_refresh_includes = 1
    let g:syntastic_cpp_config_file = 'redwood_includes'
    let g:syntastic_cpp_compiler = 'clang++'
    let g:syntastic_cpp_compiler_options = '-std=c++11'
    let g:syntastic_cpp_cpplint_exec =
    \ '/home/fede/code/redwood_ws/RedwoodInternal/Redwood/tools/lint/cpplint.py'
    let g:syntastic_cpp_cpplint_args = '--verbose=1'
    let g:syntastic_cpp_cpplint_thres = 99
    let g:syntastic_stl_format = '%E{E: %fe}%B{, }%W{W: %fw}'
  endif
endfunction!

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                Airline                                  "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif
let g:airline_symbols.paste = 'Þ'
let g:airline_powerline_fonts = 1
let g:airline_theme = 'bubblegum'
let g:airline#extensions#whitespace#enabled = 0
let g:airline_enable_hunks = 1
let g:airline_mode_map = {
      \ '__' : '-',
      \ 'n'  : 'N',
      \ 'i'  : 'I',
      \ 'R'  : 'R',
      \ 'c'  : 'C',
      \ 'v'  : 'V ch',
      \ 'V'  : 'V li',
      \ '' : 'V bl',
      \ 's'  : 'S',
      \ 'S'  : 'S',
      \ '' : 'S',
      \ }
" No filename no bufferline
let g:airline_section_c = '%#__accent_red#%{airline#util#wrap(airline#parts#readonly(),0)}%#__restore__#'
let g:airline_section_x = '%{airline#util#wrap(airline#extensions#tagbar#currenttag(),0)}'
let g:airline_section_y = '%{airline#util#wrap(airline#parts#filetype(),0)}'
" Use tabline so that buffers show at the top where there is more space.
let g:airline#extensions#tabline#enabled = 1
" Don't show whether we are displaying tabs or buffers, I never use tabs.
let g:airline#extensions#tabline#show_tab_type = 0
" Min number of buffers to display them at the top
let g:airline#extensions#tabline#buffer_min_count = 2
" Format of the filename for the buffer.
let g:airline#extensions#tabline#fnamemod = ':t'
" Display parent directory if buffer is duplicated.
let g:airline#extensions#tabline#formatter = 'unique_tail_improved'
" Straight separators for buffers.
let g:airline#extensions#tabline#left_sep = ' '
let g:airline#extensions#tabline#left_alt_sep = '|'
" For git hunks, just show them if they are non-zero
let g:airline#extensions#hunks#non_zero_only = 1
" Display the current function in the status line
let g:airline#extensions#tagbar#enabled = 1
" Display the name of the function only
let g:airline#extensions#tagbar#flags = ''
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                BufferLine                               "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" let g:bufferline_show_bufnr = 0

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                  CtrlP                                  "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:ctrlp_user_command = 'find %s -type f'
" let g:ctrlp_user_command = {
"   \ 'types': {
"     \ 1: ['.git', 'cd %s && git ls-files'],
"     \ },
"   \ 'fallback': 'find %s -type f'
"   \ }
let g:ctrlp_match_func = {'match' : 'matcher#cmatch' }
let g:ctrlp_map = 'tt'
let g:ctrlp_working_path_mode = 'ra'

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                               GitGutter                                 "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:gitgutter_map_keys = 0

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                         Parameter-Text-Object                           "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:no_parameter_object_maps = 1
vmap <silent> ia <Plug>ParameterObjectI
omap <silent> ia <Plug>ParameterObjectI
vmap <silent> aa <Plug>ParameterObjectA
omap <silent> aa <Plug>ParameterObjectA

" Redraw our screen to avoid garbage from showing up
autocmd VimEnter * redraw!
autocmd VimEnter * redraw!
